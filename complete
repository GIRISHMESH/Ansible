---

# **1️⃣ Inventory File** (`inventory.ini`)


[centos]
centos01 ansible_host=192.168.1.10
centos02 ansible_host=192.168.1.11
centos03 ansible_host=192.168.1.12

[ubuntu]
ubuntu01 ansible_host=192.168.1.20
ubuntu02 ansible_host=192.168.1.21
ubuntu03 ansible_host=192.168.1.22

[linux:children]
centos
ubuntu

[linux:vars]
ansible_ssh_private_key_file=~/.ssh/id_rsa
ansible_ssh_common_args='-o StrictHostKeyChecking=no'


---

# **2️⃣ Directory Structure**


ansible_project/
├── inventory.ini
├── linux_unified_setup.yml
├── templates/
│   ├── centos_motd.j2
│   ├── ubuntu_motd.j2
│   ├── system_info.j2
│   └── deployment_report.j2
```

---

# **3️⃣ Main Playbook with Real-Time Verification** (`linux_unified_setup.yml`)


---
- name: 🖥️ Unified Linux Configuration (CentOS & Ubuntu)
  hosts: linux
  gather_facts: yes
  become: yes
  vars:
    company_name: "TechCorp Inc"
    sysadmin_email: "admin@techcorp.com"
    timezone: "UTC"

    # OS-specific packages
    centos_packages:
      - vim-enhanced
      - htop
      - curl
      - wget
      - git
      - telnet
    ubuntu_packages:
      - vim
      - htop
      - curl
      - wget
      - git
      - telnet

    # Essential services
    centos_services: [crond, sshd]
    ubuntu_services: [cron, ssh]

  tasks:
    - name: 📊 Display host info
      ansible.builtin.debug:
        msg: |
          Host: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Arch: {{ ansible_architecture }}
      tags: info

    # Package updates
    - name: 📦 Update cache (CentOS)
      ansible.builtin.yum: update_cache=yes
      when: ansible_distribution == "CentOS"
      tags: packages

    - name: 📦 Update cache (Ubuntu)
      ansible.builtin.apt: update_cache=yes
      when: ansible_distribution == "Ubuntu"
      tags: packages

    # Package installation
    - name: 📦 Install CentOS packages
      ansible.builtin.package: name="{{ item }}" state=present
      loop: "{{ centos_packages }}"
      when: ansible_distribution == "CentOS"
      notify: packages_installed
      tags: packages

    - name: 📦 Install Ubuntu packages
      ansible.builtin.package: name="{{ item }}" state=present
      loop: "{{ ubuntu_packages }}"
      when: ansible_distribution == "Ubuntu"
      notify: packages_installed
      tags: packages

    # MOTD configuration
    - name: 🎨 Configure MOTD (CentOS)
      ansible.builtin.template:
        src: templates/centos_motd.j2
        dest: /etc/motd
        owner: root
        group: root
        mode: '0644'
      when: ansible_distribution == "CentOS"
      notify: motd_configured
      tags: motd

    - name: 🎨 Configure MOTD (Ubuntu)
      ansible.builtin.template:
        src: templates/ubuntu_motd.j2
        dest: /etc/motd
        owner: root
        group: root
        mode: '0644'
      when: ansible_distribution == "Ubuntu"
      notify: motd_configured
      tags: motd

    # Timezone
    - name: ⏰ Configure timezone
      community.general.timezone: name="{{ timezone }}"
      notify: timezone_updated
      tags: timezone

    # System info file
    - name: 📄 Create system info file
      ansible.builtin.template:
        src: templates/system_info.j2
        dest: /etc/system_info
        owner: root
        group: root
        mode: '0644'
      tags: report

    # Services
    - name: 🔧 Ensure services (CentOS)
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop: "{{ centos_services }}"
      when: ansible_distribution == "CentOS"
      tags: services

    - name: 🔧 Ensure services (Ubuntu)
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop: "{{ ubuntu_services }}"
      when: ansible_distribution == "Ubuntu"
      tags: services

    # Admin user
    - name: 👤 Create admin user (CentOS)
      ansible.builtin.user:
        name: admin
        groups: wheel
        append: yes
        shell: /bin/bash
      when: ansible_distribution == "CentOS"
      tags: users

    - name: 👤 Create admin user (Ubuntu)
      ansible.builtin.user:
        name: admin
        groups: sudo
        append: yes
        shell: /bin/bash
      when: ansible_distribution == "Ubuntu"
      tags: users

    # Cleanup
    - name: 🧹 Clean cache (CentOS)
      ansible.builtin.yum: clean=all
      when: ansible_distribution == "CentOS"
      tags: cleanup

    - name: 🧹 Clean cache (Ubuntu)
      ansible.builtin.apt: autoclean=yes
      when: ansible_distribution == "Ubuntu"
      tags: cleanup

    # Real-time verification
    - name: 🔍 Verify installed packages
      ansible.builtin.shell: |
        {% if ansible_distribution == "CentOS" %}
        rpm -qa | grep -E 'vim|htop|curl|wget|git|telnet' | sort
        {% else %}
        dpkg -l | grep -E 'vim|htop|curl|wget|git|telnet' | awk '{print $2}'
        {% endif %}
      register: installed_packages
      changed_when: false
      tags: verify

    - name: 🔍 Verify service status
      ansible.builtin.shell: |
        {% if ansible_distribution == "CentOS" %}
        systemctl is-active crond sshd
        {% else %}
        systemctl is-active cron ssh
        {% endif %}
      register: service_status
      changed_when: false
      tags: verify

    - name: 🔍 Verify MOTD content
      ansible.builtin.shell: cat /etc/motd
      register: motd_content
      changed_when: false
      tags: verify

    - name: 🔍 Verify timezone
      ansible.builtin.shell: timedatectl show --property=Timezone --value
      register: timezone_verify
      changed_when: false
      tags: verify

    - name: 📋 Store verification results
      ansible.builtin.set_fact:
        verification_results:
          hostname: "{{ inventory_hostname }}"
          distribution: "{{ ansible_distribution }}"
          packages: "{{ installed_packages.stdout_lines }}"
          services: "{{ service_status.stdout_lines }}"
          motd_lines: "{{ motd_content.stdout_lines | length }}"
          timezone: "{{ timezone_verify.stdout }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
      tags: verify

  handlers:
    - name: motd_configured
      ansible.builtin.debug:
        msg: "✅ MOTD configured on {{ inventory_hostname }}"

    - name: packages_installed
      ansible.builtin.debug:
        msg: "📦 Packages installed/updated on {{ inventory_hostname }}"

    - name: timezone_updated
      ansible.builtin.debug:
        msg: "⏰ Timezone set to {{ timezone }} on {{ inventory_hostname }}"

# Second play: Generate report
- name: 📊 Generate Deployment Report
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    report_file: "./deployment_summary_{{ ansible_date_time.epoch }}.txt"
  tasks:
    - name: 📝 Create deployment report
      ansible.builtin.template:
        src: templates/deployment_report.j2
        dest: "{{ report_file }}"
      run_once: true
      delegate_to: localhost

    - name: 📄 Show report location
      ansible.builtin.debug:
        msg: "📊 Report saved at {{ report_file }}"


---

# **4️⃣ Key Features**

1. 🔹 OS-specific tasks for **CentOS & Ubuntu**
2. 🔹 **Handlers** notify changes for MOTD, packages, timezone
3. 🔹 **Real-time verification**: packages, services, MOTD, timezone
4. 🔹 **Comprehensive report** with timestamps and verification results
5. 🔹 **Tags** for modular execution (`packages`, `motd`, `services`, `verify`)
6. 🔹 **Parent-child inventory** structure for easy scalability

---

# **5️⃣ Enhanced Deployment Report Template** (`templates/deployment_report.j2`)


# ANSIBLE DEPLOYMENT REPORT
Generated: {{ ansible_date_time.iso8601 }}
Control Machine: {{ ansible_hostname }}

## OVERVIEW
Total Hosts: {{ groups['linux'] | length }}
CentOS: {{ groups['centos'] | length }}
Ubuntu: {{ groups['ubuntu'] | length }}
Company: {{ company_name }}
Timezone: {{ timezone }}

## HOST DETAILS
{% for host in groups['linux'] %}
### {{ host }} ({{ hostvars[host].ansible_distribution }})
- Packages: 
  {% for pkg in hostvars[host].verification_results.packages %}
  ✓ {{ pkg }}
 

